package iie.hadoop.hcatalog;

import scala.Tuple2;

import org.apache.spark.SparkConf;
import org.apache.spark.api.java.JavaPairRDD;
import org.apache.spark.api.java.JavaRDD;
import org.apache.spark.api.java.JavaSparkContext;
import org.apache.spark.api.java.function.FlatMapFunction;
import org.apache.spark.api.java.function.Function;
import org.apache.spark.api.java.function.Function2;
import org.apache.spark.api.java.function.PairFunction;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Arrays;
import java.util.Properties;
//import java.util.List;
import java.util.regex.Pattern;
/**
 * SparkWordCount – 利用Spark框架读取HDFS文件，实现WordCount示例
 * 
 * @author xiaodongfang
 *
 */
public final class SparkWordCount {
	private static final Pattern SPACE = Pattern.compile(" ");

	@SuppressWarnings("serial")
	public static void main(String[] args) throws Exception {

		if (args.length < 1) {
			System.err.println("Usage: JavaWordCount <file>");
			System.exit(1);
		}
		String inputSparkFile = null;
		String outputSparkFile = null;
		try {
			//获取配置文件参数
			String confFile = args[0];
			File configFile = new File(confFile);
			// System.out.println("configuration file is:" + confFile);
			InputStream in = new FileInputStream(configFile);
			Properties props = new Properties();
			props.load(in);
			inputSparkFile = props.getProperty("inputSparkFile");
			outputSparkFile = props.getProperty("outputSparkFile");
			in.close();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		SparkConf sparkConf = new SparkConf().setAppName("SparkWordCount");
		JavaSparkContext ctx = new JavaSparkContext(sparkConf);
		JavaRDD<String> lines = ctx.textFile(inputSparkFile, 1);
		JavaRDD<String> words = lines
				.flatMap(new FlatMapFunction<String, String>() {
					@Override
					public Iterable<String> call(String s) {
						return Arrays.asList(SPACE.split(s));
					}
				});

		JavaPairRDD<String, Integer> ones = words
				.mapToPair(new PairFunction<String, String, Integer>() {

					@Override
					public Tuple2<String, Integer> call(String s) {
						return new Tuple2<String, Integer>(s, 1);
					}
				});

		JavaPairRDD<String, Integer> counts = ones
				.reduceByKey(new Function2<Integer, Integer, Integer>() {
					@Override
					public Integer call(Integer i1, Integer i2) {
						return i1 + i2;
					}
				});

		counts.map(new Function<Tuple2<String, Integer>, String>() {
			@Override
			public String call(Tuple2<String, Integer> arg0) throws Exception {
				return arg0._1 + ": " + arg0._2;
			}
		}).saveAsTextFile(outputSparkFile);
		// System.out.println("Output inputFile 'inputSparkFile'��" +
		// inputSparkFile);
		// System.out.println("Output outputFile 'outputSparkFile'��" +
		// outputSparkFile);
		ctx.stop();
	}
}
